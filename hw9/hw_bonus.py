"""
ðŸ’Ž Exercise-1: Two Sum
Write a function "two_sum(nums: list, target: int) -> tuple" that takes a list of integers
and a target integer. It should return a tuple of two indices whose elements add up to the target.
Assume that each input would have exactly one solution, and you may not use the same element twice.

Example:
two_sum([2, 7, 11, 15], 9) -> (0, 1)
"""

def two_sum(nums: list, target: int) -> tuple:
    map = {}
    for i in range(len(nums)):
        first_num = nums[i]
        second_num = target - first_num
        if second_num in map:
            return (map[second_num], i)
        map[first_num] = i

"""
ðŸ’Ž Exercise-2: Isomorphic Strings
Write a function "is_isomorphic(s: str, t: str) -> bool" that takes two strings s and t
and determines if they are isomorphic. Two strings s and t are isomorphic if the characters
in s can be replaced to get t, and all characters in s map to exactly one character in t and vice versa.

Example:
is_isomorphic('egg', 'add') -> True
"""

def is_isomorphic(s: str, t: str) -> bool:
    return len(set(zip(s, t))) == len(set(s)) == len(set(t))

"""
ðŸ’Ž Exercise-3: Check Alien Dictionary
Write a function "is_alien_sorted(words: list, order: str) -> bool" that checks if words
are sorted lexicographicaly according to a new character order provided in the string order.

Example:
is_alien_sorted(["hello","leetcode"], "hlabcdefgijkmnopqrstuvwxyz") -> True
"""

def is_alien_sorted(words: list, order: str) -> bool:
    alien_order = {char: idx for idx, char in enumerate(order)}
    transformed_words = [[alien_order[char] for char in word] for word in words]
    return all(transformed_words[i] <= transformed_words[i + 1] for i in range(len(transformed_words) - 1))

"""
ðŸ’Ž Exercise-4: Longest Substring Without Repeating Characters
Write a function "length_of_longest_substring(s: str) -> int" that takes a string s,
and returns the length of the longest substring without repeating characters.

Example:
length_of_longest_substring('abcabcbb') -> 3
"""

def length_of_longest_substring(s: str) -> int:
    char_set = set()
    left = 0
    max_length = 0
    for right in range(len(s)):
        while s[right] in char_set:
            char_set.remove(s[left])
            left += 1
        char_set.add(s[right])
        window_len = right - left + 1
        max_length = max(max_length, window_len)
    return max_length

"""
ðŸ’Ž Exercise-5: Group Shifted Strings
Write a function "group_shifted(strings: list) -> list" that takes a
list of lowercase strings and groups all strings that are generated by shifting some letters
of another string circularly. Return a list of groups, each group is a list of strings.
Groups and strings within a group can be in any order.

Example:
group_shifted(["abc", "bcd", "acef", "xyz", "az", "ba", "a", "z"]) -> [["abc","bcd"],["acef"],["xyz"],["az","ba"],["a","z"]]
"""

def group_shifted(strings: list) -> list:
    from collections import defaultdict
    map = defaultdict(list)
    for string in strings:
        diff = ord(string[0]) - ord('a')
        norm_chars = []
        for char in string:
            d = ord(char) - diff
            if d < ord('a'):
                d += 26
            norm_chars.append(chr(d))
        norm_strings = ''.join(norm_chars)
        map[norm_strings].append(string)
    return list(map.values())